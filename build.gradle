/*
 * This file was generated by the Gradle 'init' task.
 */

 //1、Gradle的三大基本脚本：init.gradle、settings.gradle、build.gradle
 //init.gradle: Gradle的初始化脚本，对应Gradle实例，在所有项目构建之前解析，需要通过--init-script指定位置或放置在GRADLE_USER_HOME目录下
 //settings.gradle：Gradle的多项目配置脚本，对应Settings实例，所有项目构建之前解析，它用于确定哪些项目需要参与构建
 //build.gradle：Gradle的项目配置脚本，对应Project实例，在项目构建时解析，它用于配置项目

//2、Gradle构建时的生命周期阶段：init(初始化阶段) -> configure(配置阶段) -> execute(执行阶段)
//init：解析init.gradle脚本、编译buildSrc目录、解析gradle.properites文件、解析settings.gradle脚本(确定哪些项目需要参与构建，并为这些项目创建对应的Project实例)
//configure：解析build.gradle脚本编译为对应的class文件并执行，执行class文件时会创建和配置task，然后会根据要执行的task构造关系依赖图
//execute：根据关系依赖图执行task

//3、Gradle的增量式构建：在执行一个task时，如果它的输入与输出与前一次执行没有发生变化，那么gradle就认为该task是最新的(UP-TO-DATA)
//每一个task都有inputs和outputs属性，它们的类型分别为TaskInputs和TaskOutputs，inputs或outputs可以是文件、文件夹、Project的某个Property等，
//我们可以在定义task时指定inputs或outputs属性从而启用gradle的增量式构建，这样可以避免一个没有变化的task被反复构建，从而提高整个gradle的构建效率

//4、Gradle构建的生命周期回调
//this.gradle.addBuildListener(new BuildListener() {
//
//    @Override
//    void buildStarted(Gradle gradle) {
//        println 'Gradle构建开始'
//    }
//
//    @Override
//    void beforeSettings(Settings settings) {
//        println '准备解析settings.gradle'
//    }
//
//    @Override
//    void settingsEvaluated(Settings settings) {
//    	println 'settings.gradle解析完成'
//    }
//
//    @Override
//    void projectsLoaded(Gradle gradle) {
//    	println '所有项目从settings.gradle加载完成'
//    }
//
//    @Override
//    void projectsEvaluated(Gradle gradle) {
//    	println '所有项目构建完成'
//    }
//
//    @Override
//    void buildFinished(BuildResult result) {
//    	println 'Gradle构建结束'
//    }
//})

//5、多项目配置
allprojects {
    repositories {
        mavenCentral()
    }
}
subprojects {
    apply plugin: 'groovy'
}




